{"ast":null,"code":"var _jsxFileName = \"/Users/titanium/Documents/Development/SynapseTeam/testTask2/test-task-table/src/components/Row/index.js\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Icon } from \"@iconify/react\";\nimport uniqid from \"uniqid\";\nimport Description from \"../Description\";\nimport { categories } from \"../../configure\";\nimport { genValues } from \"../../utils/generic\";\nimport { styles } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nexport default function Row(_ref) {\n  _s();\n\n  let {\n    jobObj,\n    index\n  } = _ref;\n  const [descrShown, setDescrShown] = useState(false);\n\n  const toggleDescr = function showOrHideDescription() {\n    setDescrShown(prev => !prev);\n  };\n\n  const {\n    job: {\n      description\n    }\n  } = jobObj;\n  const valuesToRender = genValues(jobObj, categories, styles);\n\n  const renderRows = function (values) {\n    return values.map(_ref2 => {\n      let {\n        value,\n        style\n      } = _ref2;\n      return _jsxDEV(\"div\", {\n        css: style,\n        children: _jsxDEV(\"p\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this)\n      }, uniqid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this);\n    });\n  };\n\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(\"div\", {\n      css: styles.row,\n      children: [_jsxDEV(\"div\", {\n        css: styles.cellIndex,\n        children: _jsxDEV(\"p\", {\n          children: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), renderRows(valuesToRender), descrShown ? _jsxDEV(Icon, {\n        icon: \"ci:shrink\",\n        css: styles.icon,\n        onClick: toggleDescr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this) : _jsxDEV(Icon, {\n        icon: \"ci:expand\",\n        css: styles.icon,\n        onClick: toggleDescr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), descrShown && _jsxDEV(Description, {\n      descr: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Row, \"C+IyNniT6dErWGRuQsA8dg6krM4=\");\n\n_c = Row;\nRow.propTypes = {\n  jobObj: PropTypes.object,\n  index: PropTypes.number\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/titanium/Documents/Development/SynapseTeam/testTask2/test-task-table/src/components/Row/index.js"],"names":["React","useState","PropTypes","Icon","uniqid","Description","categories","genValues","styles","Row","jobObj","index","descrShown","setDescrShown","toggleDescr","showOrHideDescription","prev","job","description","valuesToRender","renderRows","values","map","value","style","row","cellIndex","icon","propTypes","object","number"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,SAASC,MAAT,QAAuB,UAAvB;;;AAEA,eAAe,SAASC,GAAT,OAAgC;AAAA;;AAAA,MAAnB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAmB;AAC7C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMa,WAAW,GAAG,SAASC,qBAAT,GAAiC;AACnDF,IAAAA,aAAa,CAAEG,IAAD,IAAU,CAACA,IAAZ,CAAb;AACD,GAFD;;AAIA,QAAM;AACJC,IAAAA,GAAG,EAAE;AAAEC,MAAAA;AAAF;AADD,MAEFR,MAFJ;AAIA,QAAMS,cAAc,GAAGZ,SAAS,CAACG,MAAD,EAASJ,UAAT,EAAqBE,MAArB,CAAhC;;AAEA,QAAMY,UAAU,GAAG,UAAUC,MAAV,EAAkB;AACnC,WAAOA,MAAM,CAACC,GAAP,CAAW;AAAA,UAAC;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD;AAAA,aAChB;AAAoB,QAAA,GAAG,EAAEA,KAAzB;AAAA,kBACE;AAAA,oBAAID;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF,SAAUnB,MAAM,EAAhB;AAAA;AAAA;AAAA;AAAA,cADgB;AAAA,KAAX,CAAP;AAKD,GAND;;AAOA,SACE;AAAA,eACE;AAAK,MAAA,GAAG,EAAEI,MAAM,CAACiB,GAAjB;AAAA,iBACE;AAAK,QAAA,GAAG,EAAEjB,MAAM,CAACkB,SAAjB;AAAA,kBACE;AAAA,oBAAIf;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EAIGS,UAAU,CAACD,cAAD,CAJb,EAKGP,UAAU,GACT,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,WAAX;AAAuB,QAAA,GAAG,EAAEJ,MAAM,CAACmB,IAAnC;AAAyC,QAAA,OAAO,EAAEb;AAAlD;AAAA;AAAA;AAAA;AAAA,cADS,GAGT,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,WAAX;AAAuB,QAAA,GAAG,EAAEN,MAAM,CAACmB,IAAnC;AAAyC,QAAA,OAAO,EAAEb;AAAlD;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAYGF,UAAU,IAAI,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEM;AAApB;AAAA;AAAA;AAAA;AAAA,YAZjB;AAAA,kBADF;AAgBD;;GApCuBT,G;;KAAAA,G;AAsCxBA,GAAG,CAACmB,SAAJ,GAAgB;AACdlB,EAAAA,MAAM,EAAER,SAAS,CAAC2B,MADJ;AAEdlB,EAAAA,KAAK,EAAET,SAAS,CAAC4B;AAFH,CAAhB","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Icon } from \"@iconify/react\";\nimport uniqid from \"uniqid\";\n\nimport Description from \"../Description\";\nimport { categories } from \"../../configure\";\nimport { genValues } from \"../../utils/generic\";\n\nimport { styles } from \"./styles\";\n\nexport default function Row({ jobObj, index }) {\n  const [descrShown, setDescrShown] = useState(false);\n\n  const toggleDescr = function showOrHideDescription() {\n    setDescrShown((prev) => !prev);\n  };\n\n  const {\n    job: { description },\n  } = jobObj;\n\n  const valuesToRender = genValues(jobObj, categories, styles);\n\n  const renderRows = function (values) {\n    return values.map(({ value, style }) => (\n      <div key={uniqid()} css={style}>\n        <p>{value}</p>\n      </div>\n    ));\n  };\n  return (\n    <>\n      <div css={styles.row}>\n        <div css={styles.cellIndex}>\n          <p>{index}</p>\n        </div>\n        {renderRows(valuesToRender)}\n        {descrShown ? (\n          <Icon icon=\"ci:shrink\" css={styles.icon} onClick={toggleDescr} />\n        ) : (\n          <Icon icon=\"ci:expand\" css={styles.icon} onClick={toggleDescr} />\n        )}\n      </div>\n      {descrShown && <Description descr={description} />}\n    </>\n  );\n}\n\nRow.propTypes = {\n  jobObj: PropTypes.object,\n  index: PropTypes.number,\n};\n"]},"metadata":{},"sourceType":"module"}