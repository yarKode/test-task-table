{"ast":null,"code":"export const reduceJobs = function reduceJobsArrSameId(allJobsArr, allCategories) {\n  const reducedJobs = allJobsArr.reduce((acc, jobObj, i) => {\n    const repeatedObj = acc.find(el => el.job.id === jobObj.job.id);\n    const extendedObj = { ...jobObj,\n      categoryName: getCategoryName(allCategories, jobObj.id_chapter),\n      totalSum: jobObj.job.price * jobObj.value * jobObj.coef\n    };\n\n    if (repeatedObj) {\n      const newEntry = { ...repeatedObj,\n        categoryName: extendedObj.categoryName,\n        totalSum: extendedObj.totalSum,\n        value: repeatedObj.value + jobObj.value\n      };\n      const filteredAcc = acc.filter(el => el.job.id !== jobObj.job.id);\n      return [...filteredAcc, newEntry];\n    }\n\n    return [...acc, extendedObj];\n  }, []);\n  return reducedJobs;\n};\nexport const calcTotalSum = function totalSumForJobsArr(allJobsArr) {\n  const totalSum = allJobsArr.reduce((acc, jobObj, index) => {\n    const {\n      value,\n      coef,\n      job: {\n        price\n      }\n    } = jobObj;\n    const currentJobSum = value * coef * price;\n    return acc + currentJobSum;\n  }, 0);\n  return totalSum;\n};\nexport const moneyFormat = function applyMoneyFormatToNumber(amount) {\n  return new Intl.NumberFormat(\"es-ES\", {\n    style: \"currency\",\n    currency: \"EUR\"\n  }).format(amount);\n};\nexport const getCategoryName = function getCategoryNameById(allCategories, categoryId) {\n  const categoryObj = allCategories.find(catObj => catObj.id === categoryId);\n  return categoryObj.name_en;\n};\nexport const filterJobs = function filterJobsById(allJobs, jobId) {\n  return allJobs.filter(job => job.id === jobId);\n};\nexport const genValues = function generateValuesToRenderInRow(jobObj, allCategories, styles) {\n  if (jobObj) {\n    const {\n      coef,\n      dec_id,\n      value,\n      unit,\n      id_chapter,\n      job: {\n        name,\n        price\n      }\n    } = jobObj;\n    const currCategoryName = getCategoryName(allCategories, id_chapter);\n    const priceMoneyFormat = moneyFormat(price);\n    const sumMoneyFormat = moneyFormat(price * value * coef);\n    return [//    { value: 1, style: styles.cellIndex },\n    {\n      value: name,\n      style: styles.cellName\n    }, {\n      value: currCategoryName,\n      style: styles.cell\n    }, {\n      value: dec_id,\n      style: styles.cell\n    }, {\n      value: coef,\n      style: styles.cell\n    }, {\n      value: value + unit,\n      style: styles.cell\n    }, {\n      value: priceMoneyFormat,\n      style: styles.cell\n    }, {\n      value: sumMoneyFormat,\n      style: styles.cell\n    }];\n  }\n\n  return [{\n    value: \"#\",\n    style: styles.cellIndex\n  }, {\n    value: \"Name\",\n    style: styles.cellName\n  }, {\n    value: \"Category\",\n    style: styles.cell\n  }, {\n    value: \"Decision\",\n    style: styles.cell\n  }, {\n    value: \"Coef\",\n    style: styles.cell\n  }, {\n    value: \"Value\",\n    style: styles.cell\n  }, {\n    value: \"Price\",\n    style: styles.cell\n  }, {\n    value: \"Sum\",\n    style: styles.cell\n  }];\n};\nexport const sortAscDecision = (jobObj1, jobObj2) => {\n  if (jobObj1.dec_id > jobObj2.dec_id) return -1;\n  if (jobObj1.dec_id < jobObj2.dec_id) return 1;\n  return 0;\n};\nexport const sortDescDecision = (jobObj1, jobObj2) => {\n  if (jobObj1.dec_id > jobObj2.dec_id) return 1;\n  if (jobObj1.dec_id < jobObj2.dec_id) return -1;\n  return 0;\n};\nexport const sortAscCategory = (jobObj1, jobObj2) => {\n  if (jobObj1.categoryName > jobObj2.categoryName) return -1;\n  if (jobObj1.categoryName < jobObj2.categoryName) return 1;\n  return 0;\n};\nexport const sortDescCategory = (jobObj1, jobObj2) => {\n  if (jobObj1.categoryName > jobObj2.categoryName) return 1;\n  if (jobObj1.categoryName < jobObj2.categoryName) return -1;\n  return 0;\n};\nexport const sortAscSum = (jobObj1, jobObj2) => {\n  return jobObj2.totalSum - jobObj1.totalSum;\n};\nexport const sortDescSum = (jobObj1, jobObj2) => {\n  return jobObj1.totalSum - jobObj2.totalSum;\n};","map":{"version":3,"sources":["/Users/titanium/Documents/Development/SynapseTeam/testTask2/test-task-table/src/utils/generic.js"],"names":["reduceJobs","reduceJobsArrSameId","allJobsArr","allCategories","reducedJobs","reduce","acc","jobObj","i","repeatedObj","find","el","job","id","extendedObj","categoryName","getCategoryName","id_chapter","totalSum","price","value","coef","newEntry","filteredAcc","filter","calcTotalSum","totalSumForJobsArr","index","currentJobSum","moneyFormat","applyMoneyFormatToNumber","amount","Intl","NumberFormat","style","currency","format","getCategoryNameById","categoryId","categoryObj","catObj","name_en","filterJobs","filterJobsById","allJobs","jobId","genValues","generateValuesToRenderInRow","styles","dec_id","unit","name","currCategoryName","priceMoneyFormat","sumMoneyFormat","cellName","cell","cellIndex","sortAscDecision","jobObj1","jobObj2","sortDescDecision","sortAscCategory","sortDescCategory","sortAscSum","sortDescSum"],"mappings":"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","sourcesContent":["export const reduceJobs = function reduceJobsArrSameId(\n  allJobsArr,\n  allCategories\n) {\n  const reducedJobs = allJobsArr.reduce((acc, jobObj, i) => {\n    const repeatedObj = acc.find((el) => el.job.id === jobObj.job.id);\n\n    const extendedObj = {\n      ...jobObj,\n      categoryName: getCategoryName(allCategories, jobObj.id_chapter),\n      totalSum: jobObj.job.price * jobObj.value * jobObj.coef,\n    };\n\n    if (repeatedObj) {\n      const newEntry = {\n        ...repeatedObj,\n        categoryName: extendedObj.categoryName,\n        totalSum: extendedObj.totalSum,\n        value: repeatedObj.value + jobObj.value,\n      };\n\n      const filteredAcc = acc.filter((el) => el.job.id !== jobObj.job.id);\n\n      return [...filteredAcc, newEntry];\n    }\n    return [...acc, extendedObj];\n  }, []);\n\n  return reducedJobs;\n};\n\nexport const calcTotalSum = function totalSumForJobsArr(allJobsArr) {\n  const totalSum = allJobsArr.reduce((acc, jobObj, index) => {\n    const {\n      value,\n      coef,\n      job: { price },\n    } = jobObj;\n    const currentJobSum = value * coef * price;\n    return acc + currentJobSum;\n  }, 0);\n\n  return totalSum;\n};\n\nexport const moneyFormat = function applyMoneyFormatToNumber(amount) {\n  return new Intl.NumberFormat(\"es-ES\", {\n    style: \"currency\",\n    currency: \"EUR\",\n  }).format(amount);\n};\n\nexport const getCategoryName = function getCategoryNameById(\n  allCategories,\n  categoryId\n) {\n  const categoryObj = allCategories.find((catObj) => catObj.id === categoryId);\n\n  return categoryObj.name_en;\n};\n\nexport const filterJobs = function filterJobsById(allJobs, jobId) {\n  return allJobs.filter((job) => job.id === jobId);\n};\n\nexport const genValues = function generateValuesToRenderInRow(\n  jobObj,\n  allCategories,\n  styles\n) {\n  if (jobObj) {\n    const {\n      coef,\n      dec_id,\n      value,\n      unit,\n      id_chapter,\n      job: { name, price },\n    } = jobObj;\n\n    const currCategoryName = getCategoryName(allCategories, id_chapter);\n\n    const priceMoneyFormat = moneyFormat(price);\n\n    const sumMoneyFormat = moneyFormat(price * value * coef);\n\n    return [\n      //    { value: 1, style: styles.cellIndex },\n      { value: name, style: styles.cellName },\n      { value: currCategoryName, style: styles.cell },\n      { value: dec_id, style: styles.cell },\n      { value: coef, style: styles.cell },\n      { value: value + unit, style: styles.cell },\n      { value: priceMoneyFormat, style: styles.cell },\n      { value: sumMoneyFormat, style: styles.cell },\n    ];\n  }\n\n  return [\n    { value: \"#\", style: styles.cellIndex },\n    { value: \"Name\", style: styles.cellName },\n    { value: \"Category\", style: styles.cell },\n    { value: \"Decision\", style: styles.cell },\n    { value: \"Coef\", style: styles.cell },\n    { value: \"Value\", style: styles.cell },\n    { value: \"Price\", style: styles.cell },\n    { value: \"Sum\", style: styles.cell },\n  ];\n};\n\nexport const sortAscDecision = (jobObj1, jobObj2) => {\n  if (jobObj1.dec_id > jobObj2.dec_id) return -1;\n  if (jobObj1.dec_id < jobObj2.dec_id) return 1;\n  return 0;\n};\n\nexport const sortDescDecision = (jobObj1, jobObj2) => {\n  if (jobObj1.dec_id > jobObj2.dec_id) return 1;\n  if (jobObj1.dec_id < jobObj2.dec_id) return -1;\n  return 0;\n};\n\nexport const sortAscCategory = (jobObj1, jobObj2) => {\n  if (jobObj1.categoryName > jobObj2.categoryName) return -1;\n  if (jobObj1.categoryName < jobObj2.categoryName) return 1;\n  return 0;\n};\n\nexport const sortDescCategory = (jobObj1, jobObj2) => {\n  if (jobObj1.categoryName > jobObj2.categoryName) return 1;\n  if (jobObj1.categoryName < jobObj2.categoryName) return -1;\n  return 0;\n};\n\nexport const sortAscSum = (jobObj1, jobObj2) => {\n  return jobObj2.totalSum - jobObj1.totalSum;\n};\n\nexport const sortDescSum = (jobObj1, jobObj2) => {\n  return jobObj1.totalSum - jobObj2.totalSum;\n};\n"]},"metadata":{},"sourceType":"module"}